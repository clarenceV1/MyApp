package com.wodejia.myapp.table;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREAS_DO".
*/
public class AreasDODao extends AbstractDao<AreasDO, Long> {

    public static final String TABLENAME = "AREAS_DO";

    /**
     * Properties of entity AreasDO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AreasId = new Property(0, Long.class, "areasId", true, "_id");
        public final static Property EstateId = new Property(1, int.class, "estateId", false, "ESTATE_ID");
        public final static Property AreasIcon = new Property(2, String.class, "areasIcon", false, "AREAS_ICON");
        public final static Property AreasName = new Property(3, String.class, "areasName", false, "AREAS_NAME");
        public final static Property AreasAddress = new Property(4, String.class, "areasAddress", false, "AREAS_ADDRESS");
    }


    public AreasDODao(DaoConfig config) {
        super(config);
    }
    
    public AreasDODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREAS_DO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: areasId
                "\"ESTATE_ID\" INTEGER NOT NULL ," + // 1: estateId
                "\"AREAS_ICON\" TEXT," + // 2: areasIcon
                "\"AREAS_NAME\" TEXT," + // 3: areasName
                "\"AREAS_ADDRESS\" TEXT);"); // 4: areasAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREAS_DO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AreasDO entity) {
        stmt.clearBindings();
 
        Long areasId = entity.getAreasId();
        if (areasId != null) {
            stmt.bindLong(1, areasId);
        }
        stmt.bindLong(2, entity.getEstateId());
 
        String areasIcon = entity.getAreasIcon();
        if (areasIcon != null) {
            stmt.bindString(3, areasIcon);
        }
 
        String areasName = entity.getAreasName();
        if (areasName != null) {
            stmt.bindString(4, areasName);
        }
 
        String areasAddress = entity.getAreasAddress();
        if (areasAddress != null) {
            stmt.bindString(5, areasAddress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AreasDO entity) {
        stmt.clearBindings();
 
        Long areasId = entity.getAreasId();
        if (areasId != null) {
            stmt.bindLong(1, areasId);
        }
        stmt.bindLong(2, entity.getEstateId());
 
        String areasIcon = entity.getAreasIcon();
        if (areasIcon != null) {
            stmt.bindString(3, areasIcon);
        }
 
        String areasName = entity.getAreasName();
        if (areasName != null) {
            stmt.bindString(4, areasName);
        }
 
        String areasAddress = entity.getAreasAddress();
        if (areasAddress != null) {
            stmt.bindString(5, areasAddress);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AreasDO readEntity(Cursor cursor, int offset) {
        AreasDO entity = new AreasDO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // areasId
            cursor.getInt(offset + 1), // estateId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // areasIcon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // areasName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // areasAddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AreasDO entity, int offset) {
        entity.setAreasId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEstateId(cursor.getInt(offset + 1));
        entity.setAreasIcon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAreasName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAreasAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AreasDO entity, long rowId) {
        entity.setAreasId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AreasDO entity) {
        if(entity != null) {
            return entity.getAreasId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AreasDO entity) {
        return entity.getAreasId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
