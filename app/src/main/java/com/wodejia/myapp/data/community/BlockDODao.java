package com.wodejia.myapp.data.community;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wodejia.myapp.data.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BLOCK_DO".
*/
public class BlockDODao extends AbstractDao<BlockDO, Long> {

    public static final String TABLENAME = "BLOCK_DO";

    /**
     * Properties of entity BlockDO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BlockId = new Property(0, Long.class, "blockId", true, "_id");
        public final static Property BlockTitle = new Property(1, String.class, "blockTitle", false, "BLOCK_TITLE");
        public final static Property BlockSubtitle = new Property(2, String.class, "blockSubtitle", false, "BLOCK_SUBTITLE");
        public final static Property BlockIcon = new Property(3, String.class, "blockIcon", false, "BLOCK_ICON");
        public final static Property ManagerId = new Property(4, long.class, "managerId", false, "MANAGER_ID");
        public final static Property ManagerName = new Property(5, String.class, "managerName", false, "MANAGER_NAME");
    }


    public BlockDODao(DaoConfig config) {
        super(config);
    }
    
    public BlockDODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BLOCK_DO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: blockId
                "\"BLOCK_TITLE\" TEXT," + // 1: blockTitle
                "\"BLOCK_SUBTITLE\" TEXT," + // 2: blockSubtitle
                "\"BLOCK_ICON\" TEXT," + // 3: blockIcon
                "\"MANAGER_ID\" INTEGER NOT NULL ," + // 4: managerId
                "\"MANAGER_NAME\" TEXT);"); // 5: managerName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BLOCK_DO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BlockDO entity) {
        stmt.clearBindings();
 
        Long blockId = entity.getBlockId();
        if (blockId != null) {
            stmt.bindLong(1, blockId);
        }
 
        String blockTitle = entity.getBlockTitle();
        if (blockTitle != null) {
            stmt.bindString(2, blockTitle);
        }
 
        String blockSubtitle = entity.getBlockSubtitle();
        if (blockSubtitle != null) {
            stmt.bindString(3, blockSubtitle);
        }
 
        String blockIcon = entity.getBlockIcon();
        if (blockIcon != null) {
            stmt.bindString(4, blockIcon);
        }
        stmt.bindLong(5, entity.getManagerId());
 
        String managerName = entity.getManagerName();
        if (managerName != null) {
            stmt.bindString(6, managerName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BlockDO entity) {
        stmt.clearBindings();
 
        Long blockId = entity.getBlockId();
        if (blockId != null) {
            stmt.bindLong(1, blockId);
        }
 
        String blockTitle = entity.getBlockTitle();
        if (blockTitle != null) {
            stmt.bindString(2, blockTitle);
        }
 
        String blockSubtitle = entity.getBlockSubtitle();
        if (blockSubtitle != null) {
            stmt.bindString(3, blockSubtitle);
        }
 
        String blockIcon = entity.getBlockIcon();
        if (blockIcon != null) {
            stmt.bindString(4, blockIcon);
        }
        stmt.bindLong(5, entity.getManagerId());
 
        String managerName = entity.getManagerName();
        if (managerName != null) {
            stmt.bindString(6, managerName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BlockDO readEntity(Cursor cursor, int offset) {
        BlockDO entity = new BlockDO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // blockId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // blockTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // blockSubtitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // blockIcon
            cursor.getLong(offset + 4), // managerId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // managerName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BlockDO entity, int offset) {
        entity.setBlockId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBlockTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBlockSubtitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBlockIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setManagerId(cursor.getLong(offset + 4));
        entity.setManagerName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BlockDO entity, long rowId) {
        entity.setBlockId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BlockDO entity) {
        if(entity != null) {
            return entity.getBlockId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BlockDO entity) {
        return entity.getBlockId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
