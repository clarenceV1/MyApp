package com.wodejia.myapp.data.community;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wodejia.myapp.data.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TIPS_REQUEST_DO".
*/
public class TipsRequestDODao extends AbstractDao<TipsRequestDO, Long> {

    public static final String TABLENAME = "TIPS_REQUEST_DO";

    /**
     * Properties of entity TipsRequestDO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TipId = new Property(0, Long.class, "tipId", true, "_id");
        public final static Property BlockId = new Property(1, int.class, "blockId", false, "BLOCK_ID");
        public final static Property TipTitle = new Property(2, String.class, "tipTitle", false, "TIP_TITLE");
        public final static Property TipContent = new Property(3, String.class, "tipContent", false, "TIP_CONTENT");
        public final static Property UpdateTime = new Property(4, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property ReplyNum = new Property(5, int.class, "replyNum", false, "REPLY_NUM");
        public final static Property ProducterId = new Property(6, int.class, "producterId", false, "PRODUCTER_ID");
        public final static Property ProducterName = new Property(7, String.class, "producterName", false, "PRODUCTER_NAME");
    }


    public TipsRequestDODao(DaoConfig config) {
        super(config);
    }
    
    public TipsRequestDODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TIPS_REQUEST_DO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: tipId
                "\"BLOCK_ID\" INTEGER NOT NULL ," + // 1: blockId
                "\"TIP_TITLE\" TEXT," + // 2: tipTitle
                "\"TIP_CONTENT\" TEXT," + // 3: tipContent
                "\"UPDATE_TIME\" TEXT," + // 4: updateTime
                "\"REPLY_NUM\" INTEGER NOT NULL ," + // 5: replyNum
                "\"PRODUCTER_ID\" INTEGER NOT NULL ," + // 6: producterId
                "\"PRODUCTER_NAME\" TEXT);"); // 7: producterName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TIPS_REQUEST_DO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TipsRequestDO entity) {
        stmt.clearBindings();
 
        Long tipId = entity.getTipId();
        if (tipId != null) {
            stmt.bindLong(1, tipId);
        }
        stmt.bindLong(2, entity.getBlockId());
 
        String tipTitle = entity.getTipTitle();
        if (tipTitle != null) {
            stmt.bindString(3, tipTitle);
        }
 
        String tipContent = entity.getTipContent();
        if (tipContent != null) {
            stmt.bindString(4, tipContent);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(5, updateTime);
        }
        stmt.bindLong(6, entity.getReplyNum());
        stmt.bindLong(7, entity.getProducterId());
 
        String producterName = entity.getProducterName();
        if (producterName != null) {
            stmt.bindString(8, producterName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TipsRequestDO entity) {
        stmt.clearBindings();
 
        Long tipId = entity.getTipId();
        if (tipId != null) {
            stmt.bindLong(1, tipId);
        }
        stmt.bindLong(2, entity.getBlockId());
 
        String tipTitle = entity.getTipTitle();
        if (tipTitle != null) {
            stmt.bindString(3, tipTitle);
        }
 
        String tipContent = entity.getTipContent();
        if (tipContent != null) {
            stmt.bindString(4, tipContent);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(5, updateTime);
        }
        stmt.bindLong(6, entity.getReplyNum());
        stmt.bindLong(7, entity.getProducterId());
 
        String producterName = entity.getProducterName();
        if (producterName != null) {
            stmt.bindString(8, producterName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TipsRequestDO readEntity(Cursor cursor, int offset) {
        TipsRequestDO entity = new TipsRequestDO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // tipId
            cursor.getInt(offset + 1), // blockId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tipTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tipContent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // updateTime
            cursor.getInt(offset + 5), // replyNum
            cursor.getInt(offset + 6), // producterId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // producterName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TipsRequestDO entity, int offset) {
        entity.setTipId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBlockId(cursor.getInt(offset + 1));
        entity.setTipTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTipContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReplyNum(cursor.getInt(offset + 5));
        entity.setProducterId(cursor.getInt(offset + 6));
        entity.setProducterName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TipsRequestDO entity, long rowId) {
        entity.setTipId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TipsRequestDO entity) {
        if(entity != null) {
            return entity.getTipId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TipsRequestDO entity) {
        return entity.getTipId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
